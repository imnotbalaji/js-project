{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascript-project/./src/scripts/chart.js","webpack://javascript-project/./src/scripts/security.js","webpack://javascript-project/./src/scripts/view.js","webpack://javascript-project/./src/index.js"],"sourcesContent":["class Chart {\n\n    constructor(stock,time_period, svg) {\n        this.time_period = time_period;\n        this.data = stock.data;\n        console.log(time_period);\n        // debugger\n        // console.log(this.get_period(time_period));\n        stock.get_data().then((data_array)=> {\n            // this.render_bar(data_array,svg);\n            this.render_line(data_array,this.get_period(time_period),svg);\n        });\n     \n    \n    }\n    get_period(string){\n        \n        const time_period = [\"All\",\"10Y\",\"5Y\",\"2Y\",\"1Y\",\"6M\",\"3M\",\"1M\"];\n        switch(string) {\n            case \"All\":\n                return 365*50;\n                break;\n            case \"10Y\":\n                return 365 * 10;\n                break;\n            case \"5Y\":\n                return 365 * 5;\n                break;\n            case \"2Y\":\n                return 365 * 2;\n                break;\n            case \"1Y\":\n                return 365 * 1;\n                break; \n            case \"6M\":\n                return 30*6;\n                break; \n            case \"3M\":\n                return 30*3;\n                break; \n            case \"1M\":\n                return 30*1;\n                break;\n        }\n\n    }\n \n    render_line(received_data,time_period, svg){\n        console.log(time_period);\n        const formatTime = d3.timeFormat(\"%m-%y\");\n        const svg_width = svg.node().clientWidth;\n        const svg_height = svg.node().clientHeight;\n\n        \n        \n        const today = new Date();\n        const cutoffdate = new Date();\n        const daysAgo = time_period;\n        cutoffdate.setDate(today.getDate()-daysAgo);\n\n        // Filter data and sort data;\n        const data = received_data.filter(d=> new Date(d.timestamp) > cutoffdate);\n        data.sort((a,b) => new Date(a.timestamp) - new Date(b.timestamp));\n\n\n\n        const xScale = d3.scaleTime()\n                          .domain(d3.extent(data, d=> new Date(d.timestamp)))\n                          .range([0,svg_width]);\n        \n        const yScale = d3.scaleLinear()\n                         .domain([0,d3.max(data, d=> d.value)])\n                         .range([svg_height,0]);\n\n        const line = d3.line()\n                       .x(d=>xScale(new Date(d.timestamp)))\n                       .y(d=>yScale(d.value))\n                    \n\n        // Testing out some filter/ drop shadow effects \n\n        const existingFilter = svg.select(\"#shadow\");\n        if (existingFilter.empty()) {\n        // Create the filter definition and append it to the SVG\n            const filter = svg.append(\"defs\")\n                              .append(\"filter\")\n                              .attr(\"id\", \"shadow\")\n        \n\n    filter.append(\"feOffset\")\n        .attr(\"in\", \"SourceGraphic\")\n        .attr(\"dx\", 0)\n        .attr(\"dy\", 10)\n        .attr(\"result\", \"offOut\");\n\n        filter.append(\"feGaussianBlur\")\n        .attr(\"in\", \"off0ut\")\n        .attr(\"stdDeviation\", 15)\n        .attr(\"result\", \"blurOut\");\n\n\n    filter   .append(\"feBlend\")\n             .attr(\"in\", \"SourceGraphic\")\n            .attr(\"in2\", \"blurOut\")\n            .attr(\"mode\", \"normal\");\n}\n\n    // Line creation and transitions \n\n        let path = svg.select(\"path\");\n\n        // if (path.empty()){\n        //     path = svg.append(\"path\")\n                      \n        //               .attr(\"fill\",\"none\")\n        //               .attr(\"stroke\",\"steelblue\")\n        //               .attr(\"stroke-width\", 2)\n        //               .attr(\"filter\", \"url(#shadow\");\n        // } \n        //           path.datum(data)\n        //               .transition()\n        //               .duration(1000)\n        //               .attr(\"d\",line);\n     \n\n\n        if (path.empty()){\n            path = svg.append(\"path\")\n                      .attr(\"fill\",\"none\")\n                      .attr(\"stroke\",\"steelblue\")\n                      .attr(\"stroke-width\", 1)\n                      .attr(\"filter\", \"url(#shadow\");\n        } \n                  path.datum(data)\n                      .attr(\"d\",line);\n\n// Get the length of the path\n        const totalLength = path.node().getTotalLength();\n\n// Set up the initial properties for the \"drawing\" animation\n            path.attr('stroke-dasharray', totalLength + ' ' + totalLength)\n            .attr('stroke-dashoffset', totalLength);\n\n// Create the transition\n            path.transition()\n                .duration(500)  // Duration of the animation in milliseconds\n                .ease(d3.easeLinear)  // The easing function (easeLinear makes it a steady pace)\n                .attr('stroke-dashoffset', 0);  // The final value of stroke-dashoffset, which will be reached when the animation is done\n\n     \n\n\n        \n\n\n        /// Axes \n        \n        const xAxis = d3.axisBottom(xScale)\n                        .tickFormat(d=>formatTime(d))\n\n        const yAxis = d3.axisRight(yScale);\n\n     \n\n        let xAxisgroup = svg.select(\".x-axis\");\n\n        if (xAxisgroup.empty()){\n            xAxisgroup = svg.append(\"g\")\n                            .attr(\"class\",\"x-axis\")\n                            .attr(\"transform\", \"translate(0,\"+svg_height+\")\")\n        }\n\n        xAxisgroup.transition()\n                  .duration(1000)\n                  .call(xAxis);\n\n\n\n        // let yAxisgroup = svg.select(\".y-axis\");\n        // if (yAxisgroup.empty()) {\n        //     yAxisgroup = svg.append(\"g\")\n        //                     .attr(\"class\",\"y-axis\")\n        //     .attr(\"transform\",\"translate(\"+svg_width+\",0)\");\n        // }\n\n    \n\n        const hoverCircle = svg.append('circle')\n                               .attr(\"r\",5)\n                               .attr('fill',\"red\")\n                               .style(\"display\",\"none\");\n\n        const hoverText = svg.append('text')\n                             .attr('dy','-1em')\n                             .style('text-anchor','middle')\n                             .style('display','none');\n\n        const hoverLine = svg.append(\"line\")\n                              .attr(\"stroke\", \"grey\")\n                              .attr(\"stroke-width\",\"1\")\n                              .attr(\"stroke-dasharray\",\"5,5\")\n                              .style(\"display\",\"none\");\n\n        svg.on('mouseover',onMouseOver)\n            .on('mousemove', onMouseMove)\n            .on('mouseout',onMouseOut);\n\n        function onMouseOver(){\n            hoverCircle.style('display',null);\n            hoverText.style('display',null);\n            hoverLine.style('display',null);\n\n        }\n\n        function onMouseMove(event) {\n            const [mx, my] = d3.pointer(event);  // Get mouse coordinates\n         \n            const date = xScale.invert(mx);      // Invert the x-scale to get the date\n        \n            const bisectDate = d3.bisector(d=> new Date(d.timestamp)).left;\n\n            const index = bisectDate(data,date);\n            const closestDataPoint = data[index];\n\n            // console.log(closestDataPoint);\n            \n            hoverCircle.attr('cx', xScale(new Date(closestDataPoint.timestamp)))\n                       .attr('cy',yScale(closestDataPoint.value));\n            hoverLine.attr('x1',xScale(new Date(closestDataPoint.timestamp)))\n                     .attr('x2',xScale(new Date(closestDataPoint.timestamp)))\n                     .attr('y1',yScale(0))\n                     .attr('y2',yScale(closestDataPoint.value))\n                    \n            hoverText.attr('x',xScale(new Date(closestDataPoint.timestamp))) \n                     .attr('y',yScale(closestDataPoint.value) -10)\n                     .text(closestDataPoint.value);\n            \n        }\n\n        function onMouseOut(){\n            hoverCircle.style('display','none');\n            hoverText.style('display','none');\n            hoverLine.style('display','none');\n        }\n    }\n\n}\n\nexport default Chart;","class Security {\n    constructor(ticker){\n        \n        this.ticker = ticker;\n        this.data =  [30,80,45, 60, 121, 90, 15];   \n    }\n    async get_data(){\n        \n        \n\n        // We need this for the url fetching \n        // let url = this.url_maker();\n        // const res = await fetch(url);\n        // const raw_data = await res.json();\n        const raw_data =  await d3.json('./test_data/IBM_daily_full.json');\n        \n        // console.log(raw_data);\n        const time_series = raw_data[\"Time Series (Daily)\"];\n        let data_array = Object.keys(time_series).map(key => ({timestamp: key, value: parseFloat(time_series[key][\"1. open\"])}));\n\n        return data_array;\n    \n    }\n\n\n\n    url_maker(){\n        let url = \"https://www.alphavantage.co/query?\"\n        let func = \"TIME_SERIES_DAILY\";\n        let symbol = this.ticker;\n        // let interval = \"60min\"\n        let output_size = \"full\"\n        let apikey = \"MHTLO8QSWV47YWUG\";\n\n        // return url+\"function=\"+func+\"&symbol=\"+symbol+\"&interval=\"+interval+\"&apikey=\"+apikey;\n        return url+\"function=\"+func+\"&symbol=\"+symbol+\"&outputsize=\"+output_size+\"&apikey=\"+apikey;\n    }\n    \n\n    generateRandomData(){\n        const data = []\n        const startTime = new Date();\n        startTime.setHours(9,0,0,0);\n        const endTime = new Date();\n        endTime.setHours(17,0,0,0);\n\n        for (let time = startTime; time <= endTime; time.setMinutes(time.getMinutes()+30)){\n            const randomPrice = Math.random()*(200-100) + 100;\n            data.push({\n                timestamp: time.toISOString(),\n                value: randomPrice.toFixed(2)\n            }\n            )\n        }\n        return data;\n    }\n}\nexport default Security;","import Chart from \"./chart\";\nimport Security from \"./security\";\n\nclass View {\n    constructor(){\n        const main = d3.select(\"#main\"); \n        this.main = main;\n        this.render(main)\n    }\n\n    // This function will render our main screen and handle the logic to take input and direct the logic elsewhere\n    \n    render(main){\n    // Select the main element \n    \n    \n    // Render the screen\n    main.style(\"height\",\"500px\")\n        .style(\"width\",\"70%\")\n        .style(\"border\", \"none\")\n        .style(\"border-radius\", \"2%\")\n        .style(\"background-color\", \"white\")\n        .style(\"box-shadow\" ,\"5px 5px 10px rgba(0, 0, 0, 0.5)\");\n\n    // Render the welcome message   \n    // main.append(\"h1\").text(\"Welcome\")\n    //     .style(\"font-size\", \"30px\")\n    //     .style(\"margin\", \"5px\");\n    const search_container = main.append(\"div\").attr(\"id\",\"search_container\").attr(\"position\",\"relative\")  ;\n    const ticker_input = search_container.append(\"input\")\n    .attr(\"id\",\"search-input\")\n        .attr(\"placeholder\",\"Search...\")\n        .style(\"border\", \"none\")\n        .style(\"margin\", \"20px 20px\")\n        .style(\"font-size\",\"20px\")\n        .style(\"padding\", \"10px 10px\")\n        .style(\"text-transform\",\"uppercase\")\n        // .style(\"box-shadow\" ,\"5px 5px 10px rgba(0, 0, 0, 0.5)\");\n\n    const svg = main.append(\"svg\")\n        .style(\"margin\",\"50px\")\n        .attr(\"width\",\"70%\")\n        .attr(\"height\",\"80%\")\n        .style(\"overflow\",\"visible\")\n        // .style(\"border\",\"1px solid black\");\n    this.svg =svg;\n    ticker_input.on(\"keypress\", this.handle_enter.bind(this)) //This is the original one to be restored if required \n    // debugger\n    // ticker_input.on(\"keypress\", this.search_ticker);\n    }\n    async search_ticker(event){\n        let main = this.main;\n        let svg = this.svg;\n\n        if (event.key === \"Enter\") {\n            const base_url = \"https://www.alphavantage.co/query?\"\n            const func = \"SYMBOL_SEARCH\";\n            const keywords = d3.select(event.target).property(\"value\");\n            const data_type = \"json\"\n            const apikey = \"MHTLO8QSWV47YWUG\";\n            // const fetch_url = base_url + \"function=\" + func + \"&keywords=\" + keywords + \"&datatype=\" + data_type + \"&apikey=\" +apikey;\n\n            // console.log(fetch_url);\n            // const res = await fetch(fetch_url);\n            // const list = await res.json();\n            // console.log(list);\n\n            const drop_down = d3.select(\"#search_container\")\n            .append(\"div\")\n            .attr(\"id\", \"dropdown\")\n            .attr(\"position\",\"absolute\")\n            .attr(\"overflow-y\",\"auto\")\n            .style(\"border\",\"1px solid black\");\n\n            for (let i =0; i < 10;i++){\n            let drop_item = drop_down.append(\"div\")\n                                     .attr(\"id\",`div-${i}`);\n            drop_item\n            .attr(\"value\",i)\n            .text(\"Hello\"+i)\n            .style(\"background-color\",\"grey\");\n            drop_item\n            .on(\"click\",()=>{\n                d3.select(\"#search-input\").property(\"value\",i);\n            } );\n            }\n            \n    \n        }\n    }\n    handle_click(event){\n        console.log(event.value);\n    }\n    handle_enter(event){\n        let main = this.main;\n        let svg = this.svg;\n        if (event.key === \"Enter\") {    \n            const ticker = d3.select(event.target).property(\"value\");\n            const stock = new Security(ticker);\n            // debugger\n            this.render_chart(stock,\"All\",svg);\n            this.show_zoom_buttons(stock);\n        }\n    }\n\n    render_chart(stock,selected_time_period,svg){\n        new Chart(stock,selected_time_period, svg);\n\n    }\n    show_zoom_buttons(stock){\n        \n        let main = this.main;\n        let svg = this.svg;\n\n        \n        const time_period = [\"All\",\"10Y\",\"5Y\",\"2Y\",\"1Y\",\"6M\",\"3M\",\"1M\"];\n        let selected_time_period = time_period[0];\n\n\n        let zoom = main.select(\"#zoom\");\n\n\n        if (zoom.empty()) {\n            // debugger\n\n            zoom = main.append(\"div\")\n                       .attr(\"id\",\"zoom\");\n\n                const zoom_out = zoom.append(\"img\")\n                            .attr(\"id\",\"zoom-out\")\n                            .attr(\"src\",\"./images/zoom_out.png\")\n                            .attr(\"width\",\"25px\")\n                            .attr(\"height\",\"25px\");\n                \n                const zoom_text = zoom.append(\"span\").attr(\"id\",\"zoom_text\");\n\n                const zoom_in = zoom.append(\"img\")\n                          .attr(\"id\",\"zoom-in\")\n                          .attr(\"src\",\"./images/zoom_in.png\")\n                          .attr(\"width\",\"25px\")\n                          .attr(\"height\",\"25px\");\n        }\n\n            \n        let zoom_out = d3.select(\"#zoom-out\");\n        \n        d3.select(\"#zoom_text\").text(selected_time_period);\n        \n        zoom_out.on(\"click\", () => {\n                            selected_time_period = time_period[time_period.indexOf(selected_time_period)-1];\n                            // d3.select(\"#zoom_text\").remove();\n                            d3.select(\"#zoom_text\").text(selected_time_period);\n                            this.render_chart(stock,selected_time_period,svg);\n                            });\n        \n        \n        \n        \n\n        \n        let zoom_in = d3.select(\"#zoom-in\");\n\n\n            \n            \n        zoom_in.on(\"click\", () => {\n                        selected_time_period = time_period[time_period.indexOf(selected_time_period)+1];\n                        // d3.select(\"#zoom_text\").remove();\n                        d3.select(\"#zoom_text\").text(selected_time_period);\n                        this.render_chart(stock,selected_time_period,svg);\n                        });\n\n   \n        \n    }\n\n  \n\n\n}\n\nexport default View;","import Chart from \"./scripts/chart\";\nimport View from \"./scripts/view\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\n    \n    \n\n    d3.select(\"body\")\n    .style(\"background-image\",\"url('./images/island.png')\");\n\n\n    new View();\n\n\n})"],"names":["constructor","stock","time_period","svg","this","data","console","log","get_data","then","data_array","render_line","get_period","string","received_data","formatTime","d3","timeFormat","svg_width","node","clientWidth","svg_height","clientHeight","today","Date","cutoffdate","daysAgo","setDate","getDate","filter","d","timestamp","sort","a","b","xScale","scaleTime","domain","extent","range","yScale","scaleLinear","max","value","line","x","y","select","empty","append","attr","path","datum","totalLength","getTotalLength","transition","duration","ease","easeLinear","xAxis","axisBottom","tickFormat","axisRight","xAxisgroup","call","hoverCircle","style","hoverText","hoverLine","on","event","mx","my","pointer","date","invert","index","bisectDate","bisector","left","closestDataPoint","text","ticker","time_series","json","Object","keys","map","key","parseFloat","url_maker","url","generateRandomData","startTime","setHours","endTime","time","setMinutes","getMinutes","randomPrice","Math","random","push","toISOString","toFixed","main","render","ticker_input","handle_enter","bind","search_ticker","target","property","drop_down","i","drop_item","handle_click","Security","render_chart","show_zoom_buttons","selected_time_period","Chart","zoom","zoom_out","indexOf","document","addEventListener","View"],"sourceRoot":""}